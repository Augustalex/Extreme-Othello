
#Game
	#Othello AI $
	#Meddelande när spelet är över
	#Display Available moves $
	#Animationer $
	#Stats $
		#Visa totalt antal nuvarande poäng (antal ägda brickor) $
			#Visa denna information om alla spelare $
	
#Server
	#Koppla upp mot databas
		#Lägga till HOST som aktiv spelare i databasen 
		#Hämta aktiva spelare 
			#Skicka till HOST-klient
	#Koppla upp mot x antal klienter
		#Skicka information mellan klienter
			#Skicka information
				#Skicka DRAG (dvs klick-koordinater)
				#Ev. Skicka om en spelare åkt ut
				#Ev. Skicka om någon har vunnit	

#Databas
	#Koppla upp mot databasserver från inuti Java $
		# initisering av databas tabel $
		# Metadata check om tabel finns $
		# Abstraherat ut den till en egen metod $
	#Ladda upp användare mot databas $
		#Insert för att lägga in användare i db $
		#Finns som metod $
	#Ladda ner lista av användare från databas $
		#Select sats för att hämta användare $
	#Ta bort spelare ur databas $
		#Funktionalitet för det skapat $
	
#New Game Menu
	#Logon to server
		#Logon with local Player profile
			#Check if current name is not in conflict
			#Check if online game is possible
		#Get available remote players
	#Pick remote players
		#Start remote game 
	#Pick variable number of players for a game $
	#Pick local players $
		#Start local game $
	#Pick AI Players $
		#Start remote/local game with AI $
	#Confirm player selection to start game $
		#Check if legal choices (in comboboxes) 
			#Wait for remote player accept
				#Be able to cancel request
				#Be able to kick player
				#Be able for remote player to leave by checking out button
			#Check for duplicate selection $

#Main Menu
	#Settings menu $
		#Create profile (local player) $
			#Local player shows up in NewGame $
		#Make settings menu pretty
	#Ev. Replays
	
#Settings Menu
	#List of profiles $
		#Add profile $
		#Remove profile $
		#Edit profile $

#Profile Settings Menu
	#Set name $
	#Pick color $
	#Create new player from choices $
		#Store player in local data store $
		
#Local data store (Global storage) $
	#Store player profiles $
	
#State
	#Store game state in every view $
	
CODE STRUCTURE
#JavaFX kopplat till modellen
	#Mer interfaces för view models
	#Separera views från controllers

	
# BUGS BUGS BUGS #

	Listeners not removed - SOLVED $$$ -
#Listeners for cellclick and move made in Player
is not removed after activated. Resulting in console
overflow after a couple of moves.
Probably because faulty use of lambdas.

	Incorrect moves (Faulty move logic)
A move can be made below a player owned pawn.
Alternatively it can be that intermediary pawn might be ignored
in a move. But that is less likely than the first alternative.

	RandomAI crash
Random AI crashes when trying to generate random int. Cannot use bound below zero
(that is the max bound on the nextInt() method). This is after a check has been made to ensure
that the listSize it uses to calculate the bound, is above zero.

	CellMarkers does not scale down
When scaling up the CellMarkers looks fine. But when scaling down the window, the CellMarkers
does not scale down and stay big.

	Player Already Selected - SOLVED $$$ -
When the player is already selected the confirmation check is removed. But checking the box again
will not trigger another alert and corrupts the list of selected players. After that, the game cannot
start without resetting the page (i.e. by selecting a new amount of players).

	Restored state in GameView only works once
Second time a state is restored into GameView som information of boardstate is either overwritten or lost.
-----------------------------------------
FRÅGA PÅ HANDLEDNING

- MoveProperties (Wrapper-klasser)
- Abstraktion från JavaFX, mer interfaces?
- FXML och klasser för JavaFX komponenter
